
read.csv("D:/Data_analytics_Files/Cleaned_Data.csv")
flies_data <- read.csv("D:/Data_analytics_Files/Cleaned_Data.csv")
glimpse(flies_data)
library(dplyr)
library(stringr)
flies_data <- flies_data %>%
mutate(
Province = str_to_title(str_trim(Province)),
Municipality = str_to_title(str_trim(Municipality)),
Barangay = str_to_title(str_trim(Barangay))
)
flies_data <- flies_data %>%
select(-starts_with("X"))
glimpse(flies_data)
flies_data %>%
count(Barangay, sort = TRUE)
library(ggplot2)
flies_data %>%
count(Barangay) %>%
ggplot(aes(x = reorder(Barangay, n), y = n)) +
geom_col(fill = "#69b3a2") +
coord_flip() +
labs(
title = "Number of Respondents per Barangay",
x = "Barangay",
y = "Respondent Count"
) +
theme_minimal()
flies_data %>%
count(Barangay, sort = TRUE)
flies_data %>%
filter(str_trim(Barangay) == "" | is.na(Barangay)) %>%
select(Timestamp, Province, Municipality, Barangay)
flies_data %>%
filter(str_trim(Barangay) == "" | is.na(Barangay)) %>%
nrow()
flies_data <- flies_data %>%
filter(!(str_trim(Barangay) == "" | is.na(Barangay)))
flies_data %>%
count(Barangay, sort = TRUE)
library(ggplot2)
flies_data %>%
count(Barangay) %>%
ggplot(aes(x = reorder(Barangay, n), y = n)) +
geom_col(fill = "#69b3a2") +
coord_flip() +
labs(
title = "Number of Respondents per Barangay",
x = "Barangay",
y = "Respondent Count"
) +
theme_minimal()
flies_data %>%
ggplot(aes(x = as.numeric(Garbage_Collection), y = as.numeric(Number_of_Flies))) +
geom_jitter(width = 0.2, height = 0.2, alpha = 0.7, color = "#0072B2") +
geom_smooth(method = "lm", se = FALSE, color = "red") +
labs(
title = "Fly Presence vs Garbage Collection Frequency",
x = "Garbage Collection Frequency (1=Never, 5=Daily)",
y = "Fly Presence Frequency (1=Never, 4=Every day)"
) +
theme_minimal()
flies_data %>%
ggplot(aes(x = as.numeric(Garbage_Collection), y = as.numeric(Number_of_Flies))) +
geom_jitter(width = 0.2, height = 0.2, alpha = 0.7, color = "#0072B2") +
geom_smooth(method = "lm", se = FALSE, color = "red") +
labs(
title = "Fly Presence vs Garbage Collection Frequency",
x = "Garbage Collection Frequency (1=Never, 2=Rarely, 3=Weekly, 4=Every_Other_Day, 5=Daily)",
y = "Fly Presence In Large Number Frequency (1=Never,2=Rarely, 3=Few Times a Week, 4=Every day)"
) +
theme_minimal()
flies_data <- flies_data %>%
mutate(FruitPlants_Category = case_when(
str_detect(Fruit_Bearing_Plants, "notice more flies") ~ "MoreFlies",
str_detect(Fruit_Bearing_Plants, "do not notice more flies") ~ "NoChange",
str_detect(Fruit_Bearing_Plants, "No fruit") ~ "None",
str_detect(Fruit_Bearing_Plants, "not sure") ~ "Unknown",
TRUE ~ "Other"
))
flies_data %>%
count(FruitPlants_Category)
flies_data <- flies_data %>%
mutate(FruitPlants_Category = case_when(
Fruit_Bearing_Plants == "Yes, and I notice more flies when they are bearing fruit" ~ "MoreFlies",
Fruit_Bearing_Plants == "Yes, but I do not notice more flies" ~ "NoChange",
Fruit_Bearing_Plants == "No fruit-bearing plants" ~ "None",
Fruit_Bearing_Plants == "I'm not sure" ~ "Unknown",
TRUE ~ "Other"
))
flies_data %>%
count(FruitPlants_Category)
flies_data %>%
ggplot(aes(x = FruitPlants_Category, y = as.numeric(Number_of_Flies), fill = FruitPlants_Category)) +
geom_boxplot(alpha = 0.8) +
labs(
title = "Fly Presence by Fruit-Bearing Plant Category",
x = "Fruit-Bearing Plant Category",
y = "Fly Frequency Score (1 = Never, 4 = Every day)"
) +
scale_fill_manual(values = c(
"MoreFlies" = "#E69F00",
"NoChange" = "#56B4E9",
"None" = "#009E73",
"Unknown" = "#999999"
)) +
theme_minimal()
flies_data %>%
filter(Fruit_Bearing_Plants != "I'm not sure") %>%
ggplot(aes(x = Fruit_Bearing_Plants, y = as.numeric(Number_of_Flies), fill = Fruit_Bearing_Plants)) +
geom_boxplot(alpha = 0.8) +
labs(
title = "Fly Frequency vs. Fruit-Bearing Plant Observations",
x = "Response About Fruit-Bearing Plants",
y = "Fly Frequency Score (1 = Never, 4 = Every day)"
) +
scale_fill_manual(values = c(
"Yes, and I notice more flies when they are bearing fruit" = "#E69F00",
"Yes, but I do not notice more flies" = "#56B4E9",
"No fruit-bearing plants" = "#009E73"
)) +
theme_minimal() +
theme(axis.text.x = element_text(angle = 20, hjust = 1))
flies_data %>%
filter(Fruit_Bearing_Plants != "I'm not sure") %>%
ggplot(aes(x = Fruit_Bearing_Plants, y = as.numeric(Number_of_Flies), fill = Fruit_Bearing_Plants)) +
geom_boxplot(alpha = 0.8) +
labs(
title = "Fly Frequency vs. Fruit-Bearing Plant Observations",
x = "Response About Fruit-Bearing Plants",
y = "Fly Frequency Score (1 = Never, 2=Rarely, 3=Few_times_a_week, 4 = Every day)"
) +
scale_fill_manual(values = c(
"Yes, and I notice more flies when they are bearing fruit" = "#E69F00",
"Yes, but I do not notice more flies" = "#56B4E9",
"No fruit-bearing plants" = "#009E73"
)) +
theme_minimal() +
theme(axis.text.x = element_text(angle = 20, hjust = 1))
kruskal.test(as.numeric(Number_of_Flies) ~ Fruit_Bearing_Plants, data = flies_data)
kruskal.test(as.numeric(Number_of_Flies) ~ as.numeric(Garbage_Collection), data = flies_data)
flies_data %>%
mutate(Water_Stagnant_Label = case_when(
Water_Stagnant == 1 ~ "No",
Water_Stagnant == 2 ~ "I'm not sure",
Water_Stagnant == 3 ~ "Yes",
TRUE ~ "Unknown"
)) %>%
ggplot(aes(x = Water_Stagnant_Label, y = as.numeric(Number_of_Flies), fill = Water_Stagnant_Label)) +
geom_boxplot(alpha = 0.8) +
labs(
title = "Fly Frequency vs. Water Stagnation",
x = "Stagnant Water Presence",
y = "Fly Frequency Score (1 = Never, 4 = Every day)"
) +
scale_fill_manual(values = c("No" = "#009E73", "I'm not sure" = "#999999", "Yes" = "#E69F00")) +
theme_minimal()
kruskal.test(as.numeric(Number_of_Flies) ~ as.factor(Water_Stagnant), data = flies_data)
near_regador <- c("Regador", "Naligusan", "Naile", "Naisud")  # example barangays close by
flies_data <- flies_data %>%
mutate(Proximity_to_Regador = case_when(
str_to_lower(trimws(Barangay)) %in% str_to_lower(near_regador) ~ "Near",
TRUE ~ "Far"
))
flies_data %>%
ggplot(aes(x = Proximity_to_Regador, y = as.numeric(Number_of_Flies), fill = Proximity_to_Regador)) +
geom_boxplot(alpha = 0.8) +
labs(
title = "Fly Presence: Near vs. Far from Barangay Regador",
x = "Proximity to Regador",
y = "Fly Frequency Score (1 = Never, 4 = Every day)"
) +
scale_fill_manual(values = c("Near" = "#F0A202", "Far" = "#1F77B4")) +
theme_minimal()
wilcox.test(as.numeric(Number_of_Flies) ~ Proximity_to_Regador, data = flies_data)
flies_data <- flies_data %>%
mutate(Municipality = str_to_title(trimws(Municipality)))
flies_data %>%
ggplot(aes(x = Municipality, y = as.numeric(Number_of_Flies), fill = Municipality)) +
geom_boxplot(alpha = 0.8) +
labs(
title = "Fly Frequency Across Municipalities",
x = "Municipality",
y = "Fly Frequency Score (1 = Never, 4 = Every day)"
) +
theme_minimal() +
theme(axis.text.x = element_text(angle = 30, hjust = 1))
kruskal.test(as.numeric(Number_of_Flies) ~ Municipality, data = flies_data)
flies_data %>%
mutate(Garbage_Risk = as.numeric(Garbage_Piling) - as.numeric(Garbage_Collection)) %>%
ggplot(aes(x = Garbage_Risk, y = as.numeric(Number_of_Flies))) +
geom_jitter() +
geom_smooth(method = "lm", color = "blue") +
labs(title = "Garbage Risk Score vs. Fly Frequency")
unique(flies_data$Weather_Condition)
flies_data <- flies_data %>%
mutate(Weather_Clean = case_when(
str_detect(Weather_Condition, regex("hot|dry", ignore_case = TRUE)) ~ "Hot/Dry Season",
str_detect(Weather_Condition, regex("rainy|wet", ignore_case = TRUE)) ~ "Rainy/Wet Season",
str_detect(Weather_Condition, regex("no noticeable", ignore_case = TRUE)) ~ "No Noticeable Change",
str_detect(Weather_Condition, regex("not sure", ignore_case = TRUE)) ~ "Not Sure",
TRUE ~ "Other"
))
table(flies_data$Weather_Clean)
ggplot(flies_data, aes(x = Weather_Clean, y = as.numeric(Number_of_Flies), fill = Weather_Clean)) +
geom_boxplot(alpha = 0.8) +
labs(
title = "Fly Frequency by Weather Condition",
x = "Weather Condition",
y = "Fly Frequency Score (1 = Never, 4 = Every day)"
) +
theme_minimal() +
theme(axis.text.x = element_text(angle = 25, hjust = 1))
ggplot(flies_data, aes(x = Weather_Clean)) +
geom_bar(fill = "#F8766D", alpha = 0.8) +
labs(
title = "Respondents' Perception of When Flies Are More Noticeable",
x = "Weather Condition",
y = "Number of Respondents"
) +
theme_minimal() +
theme(axis.text.x = element_text(angle = 25, hjust = 1))
savehistory("~/case_study_script.Rhistory")
